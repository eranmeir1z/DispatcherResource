Dispatcher over view:

** new version, much simpler then te other that use "resources",
i found that the webbrowser contril has the "documentText", so we can load the html directly from the project
                this.webBrowser1.DocumentText = Resource1.GeoJsonHtml.Replace("{GEO_JSON}", json);
so i am using "addGeoJson()" instead of "loadGeoJson() - used in the "file"solution", 
addGeoJson() can take a json object..
** see https://stackoverflow.com/questions/32891327/whats-the-difference-between-the-loadgeojson-and-addgeojson-methods-on-google-ma
for comparison.

"{GEO_JSON}" is replaced with the new json (the new json is created with the help of this function 
"CreateJson" in "GoogleHelpers.cs".
also we can create a "Resources" for other languages, if we need.
	that way we dont create/update a file OR calling a service, in both cases 
	can cause errors/take more time.

2 solutions, 
- 1 is regular winforms application - Dispatcher that interact with the 1 other solutions (WCF service to fetch closest
agents).
- 1 is a WCF service which returns the distance between 2 coordinates.

1) Data Grid View is used to show the agents name and distance.

(the map part) it all starts from 'Form1.cs' > btnShowOnMap_Click

2) for showing the map, in a webBrowser control its loads the html from the resource "Resource1.GeoJsonHtml"

* for not showing ToLat and ToLng properties,
in the Data Grid View, i added columns manually and attached to them the right source
in "Form1.cs" constructor.

3) google maps API key: AIzaSyAUXnAM6fkLHNQl6cfWP8r0zZzkAG_vr5E
* 12-month free trial, won't auto billed until i give my permission

4) webbrowser control use IE7, and google maps dont support it (it support HTML 5)
* <meta http-equiv="X-UA-Compatible" content="IE=edge" /> 
IE=edge > uses the current version of IE that is installed on the machine.
needs to be added to the html page in order to show the map in Web Brower control

5)  <script async defer .. </script> The async attribute allows the browser to render the page * while the API loads *.

5) on the map > the source marker will be "var marker = new google.maps.Marker({ position: source, map: map });"
* source = karmiel, anapah street

6) for importing data we can use https://developers.google.com/maps/documentation/javascript/importing_data
" If your data is in a file hosted on the same domain as your Maps JavaScript API application, you can load it using 
the map.data.loadGeoJson() method. "
* Note: In order to load a json file from another domain, that domain must have enabled Cross-origin resource sharing.

7) i used that page for icons https://www.opensourcesolutions.es/en/marker-icons.html
they are getting loaded from the json file "icon"..
	map.data.setStyle(function (feature) {
		return {
			icon: feature.getProperty("icon"),
			title: feature.getProperty("name")
		}
	});

the name of the agent is getting loaded from the json to the title attribute.
in real life application, i would have download all icons that i want to use to my application


TODO:
- make the form responsive (on maximaize).
- show spinner till the maps loads


